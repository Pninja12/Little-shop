import random
import os
from collections import deque
import time


#Variáveis
inventory_material = []
inventory_sell = deque()
gold = 10
cost = 0
day = 0
done = 0
desfunction = []
dia = 0
answer = ""
material = ""
crafting = []
errado = 0
xp = 0
name = ""
number = 0

wood = 0
iron = 0
fiber = 0
ruby = 0
sap = 0
leather = 0
stone = 0


#Funções
def apagar_ecra(): #Código original do meu colega Ricardo 
        
        time.sleep(3)
        #O OS do windows é 'nt'
        if os.name == 'nt':
                #O 'cls' é o código para apagar o terminal no Windows
                os.system('cls')
        else:
                #O 'clear' é o código para apagar o terminal no Mac e no linux
                os.system('clear')

def list_resource():
        print("--------------------\nWood for 1 gold\n--------------------\nStone for 2 gold\n--------------------\nIron for 4 gold\n--------------------\nFiber for 3 gold\n--------------------\nLeather for 5 gold\n--------------------\nSapphire for 50 gold\n--------------------\nRuby for 65 gold\n--------------------\nDiamond for 80 gold\n--------------------\n")

def Answer():
        print("\nWhen you feel ready, type 'done'")
        x = input("\n-->")
        return x.lower()

def choice(x,z,a):
        if x == "wood" and z >= 1:
                z = z - 1
                print("You bought Wood!")
                a="wood"
        elif x == "stone" and z >= 2:
                z = z - 2
                print("You bought Stone!")
                a="stone"
        elif x == "iron" and z >= 4:
                z = z - 4
                print("You bought Iron!")
                a="iron"
        elif x == "fiber" and z >= 3:
                z = z - 3
                print("You bought Fiber!")
                a="fiber"
        elif x == "leather" and z >= 5:
                z = z - 5
                print("You bought Leather!")
                a="leather"
        elif x == "sapphire" and z >= 50:
                z = z - 50
                print("You bought Sapphire!!!")
                a="sapphire"
        elif x == "ruby" and z >= 65:
                z = z - 65
                print("You bought Ruby!!!")
                a="ruby"

        elif x == "diamond" and z >= 80:
                z = z - 80
                print("You bought Diamond!!!")
                a="diamond"
        else:
                if x != "done":
                        print("Write again\nYou wrote something wrong or you are out of money")
        
        return z,a
                
def show_craft(x):
        print("Your crafting recipes are:")
        print("\nSwords:")
        print("You can make a Wooden Sword with 2 Wood")
        if xp >= 100:
                print("-\nYou can make a Stone Sword with 1 Wood and 1 Stone")
        if xp >= 250:
                print("-\nYou can make a Iron Sword with 2 Iron")
        if xp >= 400:
                print("-\nYou can make a Great Sword with 2 Iron and 1 Leather")
        if xp >= 700:
                print("-\nYou can make a Lava Great Sword with 2 Iron, 1 Leather and 1 Ruby")
        if xp >= 800:
                print("-\nYou can make a Ocean Great Sword with 2 Iron, 1 Leather and 1 Sapphire")
        if xp >= 1000:
                print("-\nYou can make a Light Great Sword with 2 Iron, 1 Leather and 1 Diamond")
        print("\nBows:")
        print("You can make a Slingshot with 1 Fiber and 1 Wood")
        if xp >= 150:
                print("-\nYou can make a Stone Bow with 1 Fiber and 2 Stone")
        if xp >= 300:
                print("-\nYou can make a Iron Bow with 2 Iron and 1 Fiber")
        if xp >= 500:
                print("-\nYou can make a Hunting Bow with 2 Iron, 1 Leather and 1 Fiber")
        if xp >= 800:
                print("-\nYou can make a Fire Hunting Bow with 2 Iron, 1 Leather and 1 Fiber and 1 Ruby")
        if xp >= 900:
                print("-\nYou can make a Ice Hunting Bow with 2 Iron, 1 Leather and 1 Fiber and 1 Sapphire")
        if xp >= 1100:
                print("-\nYou can make a Heavenly Hunting Bow with 2 Iron, 1 Leather and 1 Fiber and 1 Diamond")
        print("\nShield:")
        print("You can make a Wooden Shield with 4 wood")
        if xp >= 100:
                print("You can make a Stone Shield with 4 Stone")
        if xp >= 200:
                print("You can make a Iron Shield with 4 Iron")
        if xp >= 300:
                print("You can make a Red Ultra Shield with 5 Iron and 1 Ruby")
        if xp >= 400:
                print("You can make a Blue Ultra Shield with 5 Iron and 1 Sapphire")
        if xp >= 500:
                print("You can make a Super Ultra Shield with 5 Iron and 1 Diamond")
        print("\nArmor:")
        print("You can make a Wooden Plate with 3 Wood")
        if xp >= 300:
                print("-\nYou can make a Stone extension with 2 Stone and 1 Wooden Plate")
        if xp >= 500:
                print("-\nYou can make a  Mega Armor with 4 Iron and 1 Stone extension")
        if xp >= 1000:
                print("-\nYou can make a Blazing Mega Armor with Mega Armor, 1 Iron and 1 Ruby")
        if xp >= 1200:
                print("-\nYou can make a Chilling Mega Armor with Mega Armor, 1 Iron and 1 Sapphire")
        if xp >= 5000:
                print("-\nYou can make a Divine Mega Armor with Mega Armor, 1 Iron and 1 Diamond")



        

#Classes
class Craft:
        xp = 1 
        name = ""
        cost = 1
        def __init__(self,name, cost,xp):
                name = input("Name it:")
                cost = input("How much does it cost:")
                self.name = name
                self.cost = cost
                self.xp = xp


#Classes               
class Sword(Craft):
        if number == 1:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Sword", cost, xp)
                        self.xp = xp + 17
        elif number == 2:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Sword", cost, xp)
                        self.xp = xp + 27
        elif number == 3:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Sword", cost, xp)
                        self.xp = xp + 37
        elif number == 4:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Sword", cost, xp)
                        self.xp = xp + 47
        elif number == 5:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Sword", cost, xp)
                        self.xp = xp + 77
        elif number == 6:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Sword", cost, xp)
                        self.xp = xp + 87
        elif number == 7:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Sword", cost, xp)
                        self.xp = xp + 97

class Shield(Craft):

        if number == 1:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Shield", cost, xp)
                        self.xp = xp + 25
        elif number == 2:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Shield", cost, xp)
                        self.xp = xp + 35
        elif number == 3:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Shield", cost, xp)
                        self.xp = xp + 45
        elif number == 4:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Shield", cost, xp)
                        self.xp = xp + 85
        elif number == 5:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Shield", cost, xp)
                        self.xp = xp + 95
        elif number == 6:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Shield", cost, xp)
                        self.xp = xp + 105
        
class Bow(Craft):

        if number == 1:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Bow", cost, xp)
                        self.xp = xp + 13
        elif number == 2:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Bow", cost, xp)
                        self.xp = xp + 23
        elif number == 3:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Bow", cost, xp)
                        self.xp = xp + 43
        elif number == 4:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Bow", cost, xp)
                        self.xp = xp + 63
        elif number == 5:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Bow", cost, xp)
                        self.xp = xp + 103
        elif number == 6:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Bow", cost, xp)
                        self.xp = xp + 113
        elif number == 7:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Bow", cost, xp)
                        self.xp = xp + 123
class Armour(Craft):

        if number == 1:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Armour", cost, xp)
                        self.xp = xp + 29
        elif number == 2:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Armour", cost, xp)
                        self.xp = xp + 49
        elif number == 3:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Armour", cost, xp)
                        self.xp = xp + 69
        elif number == 4:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Armour", cost, xp)
                        self.xp = xp + 139
        elif number == 5:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Armour", cost, xp)
                        self.xp = xp + 149
        elif number == 6:
                def __init__(self, name, cost, xp):
                        super().__init__(name + "Armour", cost, xp)
                        self.xp = xp + 159


#Game
while gold != 1000 and gold != 0:
        day = day + 1
        apagar_ecra()
        print(f"Good morning, this is your {day}º day.\nLet's start the day with some shopping.")
        while (True):
                if gold == 0:
                        print("You have ran out of gold :(\nIt's okay, you will be able to sell items later")
                        time.sleep(2)
                        apagar_ecra()
                        break
                print("You can buy:")
                list_resource()
                print("Which one do you want to buy?\nRemember you have",gold,"of gold")
                answer = Answer()
                desfunction = choice(answer,gold,material)
                gold = desfunction[0]
                if desfunction[1] != "": 
                        inventory_material.append(desfunction[1])
                if answer == "done":
                        print("Let's head to the next one.")
                        break
                apagar_ecra()
        while(True):
                errado = 0
                print("Now it's time to craft.\nYou will use the materials you have bought before.")
                show_craft(xp)
                print("Your inventory is:\n--------")
                for i in inventory_material:
                        print(i,"\n--------")
                print("Which one do you want to use?")
                answer = Answer()
                if inventory_material:
                        for i in inventory_material:
                                if answer == i:
                                        crafting.append(answer)
                                        inventory_material.remove(answer)
                                        errado = 0
                                        break
                                if answer == "done":
                                        errado = 0
                                        break
                                else:
                                        errado += 1
                elif not inventory_material and answer != "done":
                        print("You don't have any more items")
                if errado > 0:
                        print("You don't have that or you wrote it wrong")
                if answer == "done":
                        break
                apagar_ecra()
        while(True):
                print("Alright, now it's time ")


                                        



#Ajuda de fora


""" nome = input("Diz-me o nome")
ouro = input("diz-me o ouro")
choosing.appendleft(Weapon(nome, int(ouro), 4))
choosing.appendleft(Armor(nome, int(ouro)))
while gold != 100000:"""
        #For i que verifica qual a melhor maneira de representar uma classe
"""
        for i in reversed(choosing):
                if isinstance(i, Weapon):
                        print(i.name, i.gold, i.damage)
                elif isinstance(i, Armor):
                        print(i.name, i.gold)
                break
        x = choosing.pop()
        result = input("Bom dia, que vai comprar?")
        print(gold, cost)
        gold += 1
class Item:
    name = ""
    gold = 1
    def __init__(self, name, gold):
        self.name = name
        self.gold = gold

class Weapon(Item):
        name = "Sword "
        damage = 12
        def __init__(self, subtype, gold, damage):
                super().__init__(self.name + subtype, gold)
                self.damage = damage

        def calculateDamage(self, enemy):
                enemy.hp -= self.damage

class Armor(Item):
        name = "Armor "
        def __init__(self, subtype, gold):
                super().__init__(self.name + subtype, gold) """
